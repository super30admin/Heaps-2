
TC: O(nlogk)
SC: O(n)

21 / 21 test cases passed.
Status: Accepted
Runtime: 172 ms
Memory Usage: 41.2 MB

Approach: First create a map with element as key and number of times as it value.If we use a minheap with size of k and if we keep
adding the elements(key of map) based on the number of times it exists(value of the key) , eventually we will get a minheap with k element
if we remove the top element whenever the size of minheap goes beyond k. Retreive the elements of minheap on to a list and return it.



class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        
        Map<Integer,Integer> map = new HashMap<>();
        
        for(int a : nums){
            map.put(a,map.getOrDefault(a,0)+1);
        }
        
        PriorityQueue<Integer> minheap = new PriorityQueue<>((a,b) -> map.get(a).equals(map.get(b))?
                                                            Integer.compare(b,a): map.get(a)- map.get(b));
        
        for(int num : map.keySet()){
            minheap.offer(num);
            if(minheap.size()>k) minheap.remove();
        }
        
        List<Integer> list  = new ArrayList<Integer>();
        
        while(!minheap.isEmpty()){
            list.add(minheap.remove());
        }
        
        System.out.println(list);
        Collections.reverse(list);
        return list;
    }
}
