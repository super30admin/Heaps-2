//TimeComplexity.   O(nlogk)
//Spacecomplexity.  O(n)


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>( (a,b) ->  b[1] - a[1]
                                                   );
        
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num,0)+1);
        }
       for(int key : map.keySet()){
          
           pq.add(new int[] {key,map.get(key)});
       }
        
        int[] res = new int[k];
        for(int i = 0; i < k; i++){
           int[] temp = pq.poll();
            res[i] = temp[0];
        }
        return res;
    }
}
